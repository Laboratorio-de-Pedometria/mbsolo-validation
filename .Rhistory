'Amazonia',
'Caatinga',
'Cerrado',
#'Mata_Atalntica', #Col. 7.1
'Mata_Atlantica', #Col. 8.0
'Pampa',
'Pantanal',
# Fitofisionomia
'Floresta_Ombrofila_Aberta',
'Floresta_Estacional_Decidual',
'Floresta_Ombrofila_Densa',
'Floresta_Estacional_Semidecidual',
'Campinarana',
'Floresta_Ombrofila_Mista',
'Formacao_Pioneira',
'Savana',
'Savana_Estepica',
'Contato_Ecotono_e_Encrave',
'Floresta_Estacional_Sempre_Verde',
'Estepe',
# Quarta Comunicação Nacional
"cagb",
"cbgb",
"cdw",
"clitter",
"ctotal"
)
## Definição das métricas usadas (script "statistical_functions.R) -----------------------------------------------------
source("../code/0_statistical_functions.R") # Fonte de um script externo contendo funções estatísticas
## Modelagem-----
# Inicialização de listas para armazenar resultados de validação cruzada
rf_kFold_cross_validation <- list() # Lista para armazenar resultados de validação cruzada
rf_kFold_best_models <- list() # Lista para armazenar os melhores modelos
rf_kFold_predictions <- list() # Lista para armazenar as predições
for (i in seq(along.with = random_seeds)) {
# # Inicialização de listas para armazenar resultados de validação cruzada
# rf_kFold_cross_validation <- list() #Lista vazia para armazenar resultados
# rf_kFold_best_models <- list() #Lista vazia para armazenar os melhores modelos
#
# for (i in seq(along.with = random_seeds)) { #Este loop itera sobre todas as sementes aleatórias armazenadas em random_seeds
ti <- Sys.time() #Armazena tempo de inicio
print(paste("Start time:", Sys.time(),"; random seed:", random_seeds[i])) #Para mostrar as mensagens Start time: tempo atual; Random seed: seed usada
## Configura a semente de randomização para garantir a reprodutibilidade dos resultados
set.seed(random_seeds[i])
## Prepara um objeto de controle kfold
cv_control_object <- trainControl(method = "cv", number = 10, #Define o método (Validação cruzada) e npumero de folds (10)
summaryFunction = my_summary_metrics, #É especificada como a função de resumo para  para calcular as métricas estatísticas
returnResamp = 'all') #Para retornar todas as amostras de treinamento e validação
## Treinando o modelo
tuned_RF_kfold_cv <- train( #Treina um modelo Random Forest
as.formula(paste("estoque", "~",
paste(covariables, collapse = '+'))), #Define a fórmula do modelo, especificando a variável de resposta ("estoque") e as covariáveis como variáveis explicativas
data = original_data,  # Especifica o conjunto de dados utilizado para treinamento
method = "ranger",  # Especifica o método de treinamento como "ranger" (Random Forest)
num.trees = 1000, #Número de árvores de regressão
replace = TRUE, #Especifica se a reposição deve ser usada na amostragem de dados para treinamento.
sample.fraction = 0.632, #Especifica a fração de dados a serem usados para treinamento.
importance = "permutation", #Método para calcular a importância das variáveis: "permutation" permuta valores de uma variável para medir a importância
trControl = cv_control_object, #Especifica o objeto de controle de validação cruzada a ser usado. O objeto cv_control_object foi criado anteriormente e especifica que a validação cruzada será realizada com 10 folds.
tuneGrid = expand.grid( ## Grade de valores a serem ajustados durante o processo de ajuste (tuning)
mtry = 25, #Número de variáveis consideradas para a divisão em cada nó
min.node.size = 5, #Número mínimo de observações em um nó termina
splitrule = "variance") #Método para dividir os nós da árvore
)
# Remove o objeto de controle após o treinamento do modelo para liberar memória
remove(cv_control_object)
# Salvando as predições para cada fold
predictions <- predict(tuned_RF_kfold_cv, newdata = original_data)
rf_kFold_predictions[[i]] <- data.frame(Seed = random_seeds[i], Predictions = predictions)
# ... [Resto do loop permanece inalterado]
}
### Script para Validação Cruzada ###
# Data: 2023-12-12
# Autores: Erli dos Santos, Marcos Cardoso Taciara Horst
# Contato: erlipinto@gmail.com, cardoso.mvs@gmail.com
## Objetivo:
# Este script realiza modelagem estatística usando o algoritmo Random Forest para prever a variável de resposta 'estoque'.
# Inclui etapas de preparação dos dados, treinamento do modelo com validação cruzada k-fold, avaliação de métricas de desempenho e
# salvamento dos resultados.
# Pacotes necessários
require(readr)  # Para leitura de arquivos CSV
require(dplyr)  # Para manipulação de dados
require(writexl)  # Para escrever dados em Excel
require(caret)  # Para treinamento de modelos de aprendizado de máquina
require(ranger)  # Implementação de Random Forest otimizada para desempenho
# Dividindo núcleos de processamento (optional)
library(doParallel)  # Para trabalhar com clusters
cl <- makeCluster(detectCores() - 2)  # Cria um cluster
registerDoParallel(cl)  # Registra o cluster
# Definindo caminhos para os diretórios de entrada e saída
output_models_path <- "models/"
output_models_results_path <- "results/"
# Importação e divisão de datasets
original_data <- read.csv("13-12-23/data/matriz_soc_obs_C1_v1_0_0.csv")
### Script para Validação Cruzada ###
#Data: 2023-12-12
#Autores: Erli dos Santos, Marcos Cardoso Taciara Horst
#Contato: erlipinto@gmail.com, cardoso.mvs@gmail.com
## Objetivo:
# Este script realiza modelagem estatística usando o algoritmo Random Forest para prever a variável de resposta 'estoque'.
# Inclui etapas de preparação dos dados, treinamento do modelo com validação cruzada k-fold, avaliação de métricas de desempenho e
# salvamento dos resultados.
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## Pacotes necessários -------------------------------------------------------
require(readr) # Para leitura de arquivos CSV
require(dplyr) # Para manipulação de dados
require(writexl) # Para escrever dados em Excel
require(random) # Biblioteca aleatória
require(caret) # Para treinamento de modelos de aprendizado de máquina
#require(randomForest) #Alternativa ao ranger para modelagem com Random Forest
require(ranger) # Implementação de Random Forest otimizada para desempenho.
## Dividindo núcleos de processamento (optional) --------------------------------------------------------------
library(doParallel) #Para trabalhar com clusters
# Criando um cluster com um número de núcleos igual ao número de núcleos
cl <- makeCluster(detectCores()-2) #Esta função retorna o número de núcleos disponíveis no seu sistema.
# Registrando o cluster para paralelizar operações
registerDoParallel(cl) #Esta função registra o cluster criado anteriormente, permitindo que as operações sejam executadas em paralelo nos núcleos disponíveis.
#A razão para subtrair dois núcleos geralmente é deixar alguns núcleos livres para outras tarefas do sistema operacional, garantindo que o processamento paralelo não sobrecarregue totalmente o sistema.
#Melhora potencialmente o desempenho e reduz o tempo de execução.
## Definindo caminhos para os diretórios de entrada e saída ----------------------------------------------------
#Define o caminho para salvar os modelos ajustados
output_models_path <- "models/"
#Define o caminho para salvar os resultados
#output_models_results_path <- "results/"
## Importação e divisão de datasets. ---------------------------------------------------------------------------
#Lê o arquivo CSV para a variável original_data.
original_data <- read.csv("../data/matriz_soc_obs_C1_v1_0_0.csv")
#Armazena a versão dos dados analisados.
data_version <- "C1_v1_0_0"
#Define a variável k para o número de folds na validação cruzada (ainda não definido).
k = NA
## Criação do vetor de sementes aleatórias --------------------------------------------------------------------
# randomNumbers(n = 100, min = 100, max = 9999, col = 1) %>% as.vector()  # código original para gerar 100 sementes aleatórias entre 100 e 9999.
#Define o vetor random_seeds com 100 sementes aleatórias.
random_seeds <- c(6842, 7045, 1359, 4109, 7947, 9122, 2050, 6646, 8143, 8444,
6402, 1721, 6955, 3744, 3144, 3681, 9588, 3807, 4464, 1034,
950, 8778, 163, 7249, 3181, 9938, 1564, 685, 8560, 8504, 3092,
7722, 6351, 2368, 5969, 6367, 3921, 8767, 9040, 1415, 428,
4837, 8263, 1631, 4249, 1411, 4747, 3158, 7846, 430, 6366,
6428, 1305, 8981, 3461, 6489, 1580, 8997, 8685, 5944, 991,
3630, 4472, 9304, 8411, 4961, 6877, 1325, 1507, 6748, 9408,
5790, 8395, 6161, 8942, 8907, 329, 2263, 9397, 3317, 6359,
8121, 2416, 1121, 9781, 4723, 5186, 3671, 7715, 4939, 4640,
9268, 5138, 6258, 8862, 2386, 6146, 879, 6644, 1821)
## Covariáveis --------------------------------------------------------------------------------------------
covariables <- c(
# Soilgrids WRB probability classes
'Ferralsols',
'Histosols',
'Sandysols',
'Humisols',
'Thinsols',
'Wetsols',
# Soilgrids Soil Properties
'bdod',
'cec',
'cfvo',
'clay',
'nitrogen',
'phh2o',
'sand',
'silt',
'soc',
'oxides',
'clayminerals',
# Black Soil
'black_soil_prob',
# Geomorphometry
'convergence',
'cti',
'eastness',
'northness',
'pcurv',
'roughness',
'slope',
'spi',
'elevation',
# Lat-Long
'latitude',
'longitude',
# Koppen
'lv1_Humid_subtropical_zone',
'lv1_Tropical',
'lv2_monsoon',
'lv2_oceanic_climate_without_sry_season',
'lv2_with_dry_summer',
'lv2_with_dry_winter',
'lv2_with_dry_winter_1',
'lv2_without_dry_season',
'lv3_with_hot_summer',
'lv3_with_temperate_summer',
# Indices
'evi_mean',
'savi_mean',
'ndvi_mean',
# # MapBiomas - Col.7.1
# 'formacaoCampestre',
# 'formacaoFlorestal',
# 'formacaoSavanica',
# 'mosaicoAgriculturaPastagem',
# 'outrasFormacoesNaoFlorestais',
# 'pastagem',
# 'lavouras',
# 'antropico',
# 'natural',
# 'Area_Estavel',
# MapBiomas - Col. 8.0
# 'campoAlagado-areaPantanosa', #Não rodou na matriz C1-v1_0_0
'formacaoCampestre',
'formacaoFlorestal',
'formacaoSavanica',
'lavouras',
'mosaicoDeUsos',
'outrasFormacoesFlorestais',
'pastagem',
'restingas',
'silvicultura',
'antropico',
'natural',
#'Area_Estavel',
# Biomas
'Amazonia',
'Caatinga',
'Cerrado',
#'Mata_Atalntica', #Col. 7.1
'Mata_Atlantica', #Col. 8.0
'Pampa',
'Pantanal',
# Fitofisionomia
'Floresta_Ombrofila_Aberta',
'Floresta_Estacional_Decidual',
'Floresta_Ombrofila_Densa',
'Floresta_Estacional_Semidecidual',
'Campinarana',
'Floresta_Ombrofila_Mista',
'Formacao_Pioneira',
'Savana',
'Savana_Estepica',
'Contato_Ecotono_e_Encrave',
'Floresta_Estacional_Sempre_Verde',
'Estepe',
# Quarta Comunicação Nacional
"cagb",
"cbgb",
"cdw",
"clitter",
"ctotal"
)
## Definição das métricas usadas (script "statistical_functions.R) -----------------------------------------------------
source("../code/0_statistical_functions.R") # Fonte de um script externo contendo funções estatísticas
## Modelagem-----
# Inicialização de listas para armazenar resultados de validação cruzada
rf_kFold_cross_validation <- list() # Lista para armazenar resultados de validação cruzada
rf_kFold_best_models <- list() # Lista para armazenar os melhores modelos
rf_kFold_predictions <- list() # Lista para armazenar as predições
for (i in seq(along.with = random_seeds)) {
# # Inicialização de listas para armazenar resultados de validação cruzada
# rf_kFold_cross_validation <- list() #Lista vazia para armazenar resultados
# rf_kFold_best_models <- list() #Lista vazia para armazenar os melhores modelos
#
# for (i in seq(along.with = random_seeds)) { #Este loop itera sobre todas as sementes aleatórias armazenadas em random_seeds
ti <- Sys.time() #Armazena tempo de inicio
print(paste("Start time:", Sys.time(),"; random seed:", random_seeds[i])) #Para mostrar as mensagens Start time: tempo atual; Random seed: seed usada
## Configura a semente de randomização para garantir a reprodutibilidade dos resultados
set.seed(random_seeds[i])
## Prepara um objeto de controle kfold
cv_control_object <- trainControl(method = "cv", number = 10, #Define o método (Validação cruzada) e npumero de folds (10)
summaryFunction = my_summary_metrics, #É especificada como a função de resumo para  para calcular as métricas estatísticas
returnResamp = 'all') #Para retornar todas as amostras de treinamento e validação
## Treinando o modelo
tuned_RF_kfold_cv <- train( #Treina um modelo Random Forest
as.formula(paste("estoque", "~",
paste(covariables, collapse = '+'))), #Define a fórmula do modelo, especificando a variável de resposta ("estoque") e as covariáveis como variáveis explicativas
data = original_data,  # Especifica o conjunto de dados utilizado para treinamento
method = "ranger",  # Especifica o método de treinamento como "ranger" (Random Forest)
num.trees = 1000, #Número de árvores de regressão
replace = TRUE, #Especifica se a reposição deve ser usada na amostragem de dados para treinamento.
sample.fraction = 0.632, #Especifica a fração de dados a serem usados para treinamento.
importance = "permutation", #Método para calcular a importância das variáveis: "permutation" permuta valores de uma variável para medir a importância
trControl = cv_control_object, #Especifica o objeto de controle de validação cruzada a ser usado. O objeto cv_control_object foi criado anteriormente e especifica que a validação cruzada será realizada com 10 folds.
tuneGrid = expand.grid( ## Grade de valores a serem ajustados durante o processo de ajuste (tuning)
mtry = 25, #Número de variáveis consideradas para a divisão em cada nó
min.node.size = 5, #Número mínimo de observações em um nó termina
splitrule = "variance") #Método para dividir os nós da árvore
)
# Remove o objeto de controle após o treinamento do modelo para liberar memória
remove(cv_control_object)
# Salvando as predições para cada fold
predictions <- predict(tuned_RF_kfold_cv, newdata = original_data)
rf_kFold_predictions[[i]] <- data.frame(Seed = random_seeds[i], Predictions = predictions)
# ... [Resto do loop permanece inalterado]
}
# leitura/escrita de arquivos, e operações de pipeline
require(dplyr)
require(readxl)
require(writexl)
require(readr)
require(tidyr)
require(tibble)
#require(hydroGOF)
require(yardstick)
require(caret)
require(ranger)
library(magrittr)
# Data --------------------------------------------------------------------
# Definindo a versão dos dados em uso
data_version <- "C1_v1_0_0"
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "results/2023_12_12_cv_C1_v1_0_0/"
cvs_results_path <- "results/2023_12_12_cvs_C1_v1_0_0/"
# Listando arquivos .xlsx no caminho especificado
list.files(path = cv_results_path, pattern = ".xlsx")
list.files(path = cvs_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30)
)
data_version <- "C1_v1_0_0"
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "results/2023_12_12_cv_C1_v1_0_0"
cvs_results_path <- "results/2023_12_12_cvs_C1_v1_0_0"
# Listando arquivos .xlsx no caminho especificado
list.files(path = cv_results_path, pattern = ".xlsx")
list.files(path = cvs_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30)
)
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "results/2023_12_12_cv_C1_v1_0_0"
cvs_results_path <- "results/2023_12_12_cvs_C1_v1_0_0"
# Listando arquivos .xlsx no caminho especificado
list.files(path = cv_results_path, pattern = ".xlsx")
list.files(path = cvs_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30)
)
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "results/2023_12_12_cv_C1_v1_0_0/"
cvs_results_path <- "results/2023_12_12_cvs_C1_v1_0_0/"
# Listando arquivos .xlsx no caminho especificado
list.files(path = cv_results_path, pattern = ".xlsx")
list.files(path = cvs_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30)
)
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
cv_results_path <- "results/2023_12_12_cv_C1_v1_0_0/"
cvs_results_path <- "results/2023_12_12_cvs_C1_v1_0_0/"
list.files(path = cv_results_path, pattern = ".xlsx")
list.files(path = cvs_results_path, pattern = ".xlsx")
list.files
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "results/2023_12_12_cv_C1_v1_0_0/"
cvs_results_path <- "results/2023_12_12_cvs_C1_v1_0_0/"
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "results_20clusters/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "results_30clusters/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30),
)
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "../results/2023_12_12_cv_C1_v1_0_0/"
cvs_results_path <- "../results/2023_12_12_cvs_C1_v1_0_0/"
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "results_20clusters/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "results_30clusters/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30),
)
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- "../results/2023_12_12_cv_C1_v1_0_0/"
cvs_results_path <- "/results/2023_12_12_cvs_C1_v1_0_0/"
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, "/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
# Resultados da validação cruzada Spatial com diferentes números de clusters
## 10 clusters
read_excel(
paste0(cvs_results_path, "results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
## 20 clusters
read_excel(
paste0(cvs_results_path, "results_20clusters/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
## 30 clusters
read_excel(
paste0(cvs_results_path, "results_30clusters/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30),
)
## 10 clusters
read_excel(
paste0(cvs_results_path, "D:/0_Projetos/cross-validation-mapbiomas-solo/results/2023_12_13_cvs_C1_v1_0_0/results_10clusters/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),

# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 10),
## 20 clusters
# read_excel(
# paste0(cv_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 20),
## 30 clusters
read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_03_18_cv_C1_v2_0_0/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 30)
)
# Required packages -------------------------------------------------------
#install.packages("dplyr")
#install.packages("readxl")
#install.packages("writexl")
#install.packages("readr")
#install.packages("tidyr")
#install.packages("tibble")
#install.packages("yardstick")
#install.packages("caret")
#install.packages("ranger")
#install.packages("chillR")
require(dplyr)
require(readxl)
require(writexl)
require(readr)
require(tidyr)
require(tibble)
require(yardstick)
require(caret)
require(ranger)
require(chillR)
# Data --------------------------------------------------------------------
data_version <- "C1_v003"
cv_results_path <- "D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/rf-kFold-results.xlsx"
list.files(path = cv_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Unique model results ----------------------------------------------------
cv_results <- list(
# Resultados da validação cruzada k-Fold comum:
stable_rf__kFold_results = read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "Both stable and unstable", n_clusters = 0),
# Resultados da validação cruzada Spatial
## 10 clusters
# read_excel(
# paste0(cv_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 10),
## 20 clusters
# read_excel(
# paste0(cv_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 20),
## 30 clusters
read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_04_08_cvs_C1_v001/results_30clusters/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 30)
)
cv_results <- bind_rows(cv_results)
# Writting results --------------------------------------------------------
write_xlsx(cv_results,
path = "D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/cross_validation-results_C1_v003.xlsx",
col_names = TRUE)
# Biome-wise standard cross-validation statistics -------------------------
input_data_path <- "D:/0_Projetos/1_mbsolos-validation/data/"
original_data <- read_csv(paste0(input_data_path,
"/matriz_soc_obs_C1_v003_antiga.csv"))
data_version <- "C1_v003"
original_data <- original_data %>% mutate(
biome = ifelse(Amazonia == 1, "Amazônia",
ifelse(Caatinga == 1, "Caatinga",
ifelse(Mata_Atlantica == 1, "Mata Atlântica",
ifelse(Cerrado == 1, "Cerrado",
ifelse(Pampa == 1, "Pampa",
ifelse(Pantanal == 1, "Pantanal", "NA"
)))))))
remove(input_data_path)
# Auxiliary functions -----------------------------------------------------
remove_tail <- function(x, sep = ".R", del = 1){
sapply(strsplit(as.character(x), split = sep, fixed = TRUE),
function(i) paste(head(i, -del), collapse = sep))
}
keep_tail <- function(x, sep = "_", del = 4){
sapply(strsplit(as.character(x), split = sep, fixed = TRUE),
function(i) paste(tail(i, -del), collapse = sep))
}
regression_eval <- function(pred, obs){
# mean error
ME <- round(mean(pred - obs, na.rm = TRUE), digits = 4)
# mean square error
MSE <-   round(mean((pred - obs)^2, na.rm = TRUE), digits = 4)
# mean absolute error
MAE <-   round(mean(abs(pred - obs), na.rm = TRUE), digits = 4)
# root mean square error
RMSE <-   round(sqrt(mean((pred - obs)^2, na.rm = TRUE)), digits = 4)
# Pearson's correlation squared
r2 <-  round((cor(pred, obs, method = 'spearman', use = 'pairwise.complete.obs')^2), digits = 4)
# Nash–Sutcliffe model efficiency coefficient
NSE <- round((1 - sum((obs - pred)^2) / sum((obs - mean(obs))^2)), digits = 4)  # Nash–Sutcliffe model efficiency coefficient
# Lin's concordance correlation coefficient
CCC <- round(yardstick::ccc_vec(truth = obs, estimate = pred), digits = 4)
RPIQ <- RPD(pred, obs, na.rm = TRUE)
out <- c(ME, MAE, MSE, RMSE, NSE, r2, CCC, RPIQ)
names(out) <- c("ME", "MAE", "MSE", "RMSE", "NSE", "Rsquared", "CCC", "RPIQ")
if (any(is.nan(out)))
out[is.nan(out)] <- NA
out
}
# Computing statistical metrics for samples from each biome separa --------
# Computing same goodness-of-fit metrics from models tuning
models_path <- "D:/0_Projetos/1_mbsolos-validation/models/tuned-models_C1_v003_antigo/"
model_names <- list.files(path = models_path, pattern = "RF_cv_model")
model_number <- keep_tail(remove_tail(model_names)) %>% as.numeric()
check_statistical_results <- function(
dataset = biomes[["Amazônia"]],
biome = "Amazônia",
map_version = data_version, model_for = "Both stable and unstable",
cross_validation = "Standard k-Fold CV", n_clusters = 0, model_number = 1) {
regression_eval(pred = dataset %>% pull(pred_estoque),
obs = dataset %>% pull(estoque)) %>%
as.data.frame() %>% t() %>% as_tibble() %>%
mutate(model = model_number,
map_version = map_version,
n_clusters = n_clusters,
cross_validation = cross_validation,
model_for = model_for,
biome = biome)
}
amazonia_cv_results <- list()
caatinga_cv_results <- list()
cerrado_cv_results <- list()
mata_atlantica_cv_results <- list()
pampa_cv_results <- list()
pantanal_cv_results <- list()
for (i in 1:100) {
load(paste0(models_path,
model_names[grep(paste0("_", model_number[i], ".RData"), model_names)]))
original_data$pred_estoque <- tuned_RF_kfold_cv[["finalModel"]][["predictions"]]
amazonia_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Amazônia"), biome = "Amazônia",
model_number = i)
caatinga_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Caatinga"), biome = "Caatinga",
model_number = i)
cerrado_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Cerrado"), biome = "Cerrado",
model_number = i)
mata_atlantica_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Mata Atlântica"), biome = "Mata Atlântica",
model_number = i)
pampa_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Pampa"), biome = "Pampa",
model_number = i)
pantanal_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Pantanal"), biome = "Pantanal",
model_number = i)
original_data <- original_data %>% select(-pred_estoque)
remove(tuned_RF_kfold_cv)
gc()
}
# Required packages -------------------------------------------------------
#install.packages("dplyr")
#install.packages("readxl")
#install.packages("writexl")
#install.packages("readr")
#install.packages("tidyr")
#install.packages("tibble")
#install.packages("yardstick")
#install.packages("caret")
#install.packages("ranger")
#install.packages("chillR")
require(dplyr)
require(readxl)
require(writexl)
require(readr)
require(tidyr)
require(tibble)
require(yardstick)
require(caret)
require(ranger)
require(chillR)
# Data --------------------------------------------------------------------
data_version <- "C1_v003"
cv_results_path <- "D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/rf-kFold-results.xlsx"
list.files(path = cv_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Unique model results ----------------------------------------------------
cv_results <- list(
# Resultados da validação cruzada k-Fold comum:
stable_rf__kFold_results = read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "Both stable and unstable", n_clusters = 0),
# Resultados da validação cruzada Spatial
## 10 clusters
# read_excel(
# paste0(cv_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 10),
## 20 clusters
# read_excel(
# paste0(cv_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 20),
## 30 clusters
read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_04_08_cvs_C1_v001/results_30clusters/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 30)
)
cv_results <- bind_rows(cv_results)
# Writting results --------------------------------------------------------
write_xlsx(cv_results,
path = "D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/cross_validation-results_C1_v003.xlsx",
col_names = TRUE)
# Biome-wise standard cross-validation statistics -------------------------
input_data_path <- "D:/0_Projetos/1_mbsolos-validation/data/"
original_data <- read_csv(paste0(input_data_path,
"/matriz_soc_obs_C1_v003_antiga.csv"))
data_version <- "C1_v003"
original_data <- original_data %>% mutate(
biome = ifelse(Amazonia == 1, "Amazônia",
ifelse(Caatinga == 1, "Caatinga",
ifelse(Mata_Atlantica == 1, "Mata Atlântica",
ifelse(Cerrado == 1, "Cerrado",
ifelse(Pampa == 1, "Pampa",
ifelse(Pantanal == 1, "Pantanal", "NA"
)))))))
remove(input_data_path)
# Auxiliary functions -----------------------------------------------------
remove_tail <- function(x, sep = ".R", del = 1){
sapply(strsplit(as.character(x), split = sep, fixed = TRUE),
function(i) paste(head(i, -del), collapse = sep))
}
keep_tail <- function(x, sep = "_", del = 4){
sapply(strsplit(as.character(x), split = sep, fixed = TRUE),
function(i) paste(tail(i, -del), collapse = sep))
}
regression_eval <- function(pred, obs){
# mean error
ME <- round(mean(pred - obs, na.rm = TRUE), digits = 4)
# mean square error
MSE <-   round(mean((pred - obs)^2, na.rm = TRUE), digits = 4)
# mean absolute error
MAE <-   round(mean(abs(pred - obs), na.rm = TRUE), digits = 4)
# root mean square error
RMSE <-   round(sqrt(mean((pred - obs)^2, na.rm = TRUE)), digits = 4)
# Pearson's correlation squared
r2 <-  round((cor(pred, obs, method = 'spearman', use = 'pairwise.complete.obs')^2), digits = 4)
# Nash–Sutcliffe model efficiency coefficient
NSE <- round((1 - sum((obs - pred)^2) / sum((obs - mean(obs))^2)), digits = 4)  # Nash–Sutcliffe model efficiency coefficient
# Lin's concordance correlation coefficient
CCC <- round(yardstick::ccc_vec(truth = obs, estimate = pred), digits = 4)
RPIQ <- RPD(pred, obs, na.rm = TRUE)
out <- c(ME, MAE, MSE, RMSE, NSE, r2, CCC, RPIQ)
names(out) <- c("ME", "MAE", "MSE", "RMSE", "NSE", "Rsquared", "CCC", "RPIQ")
if (any(is.nan(out)))
out[is.nan(out)] <- NA
out
}
# Computing statistical metrics for samples from each biome separa --------
# Computing same goodness-of-fit metrics from models tuning
models_path <- "D:/0_Projetos/1_mbsolos-validation/models/stuned-models_C1_v003_antigo"
model_names <- list.files(path = models_path, pattern = "RF_cv_model")
model_number <- keep_tail(remove_tail(model_names)) %>% as.numeric()
check_statistical_results <- function(
dataset = biomes[["Amazônia"]],
biome = "Amazônia",
map_version = data_version, model_for = "Both stable and unstable",
cross_validation = "Standard k-Fold CV", n_clusters = 0, model_number = 1) {
regression_eval(pred = dataset %>% pull(pred_estoque),
obs = dataset %>% pull(estoque)) %>%
as.data.frame() %>% t() %>% as_tibble() %>%
mutate(model = model_number,
map_version = map_version,
n_clusters = n_clusters,
cross_validation = cross_validation,
model_for = model_for,
biome = biome)
}
amazonia_cv_results <- list()
caatinga_cv_results <- list()
cerrado_cv_results <- list()
mata_atlantica_cv_results <- list()
pampa_cv_results <- list()
pantanal_cv_results <- list()
for (i in 1:100) {
load(paste0(models_path,
model_names[grep(paste0("_", model_number[i], ".RData"), model_names)]))
original_data$pred_estoque <- tuned_RF_kfold_cv[["finalModel"]][["predictions"]]
amazonia_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Amazônia"), biome = "Amazônia",
model_number = i)
caatinga_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Caatinga"), biome = "Caatinga",
model_number = i)
cerrado_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Cerrado"), biome = "Cerrado",
model_number = i)
mata_atlantica_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Mata Atlântica"), biome = "Mata Atlântica",
model_number = i)
pampa_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Pampa"), biome = "Pampa",
model_number = i)
pantanal_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Pantanal"), biome = "Pantanal",
model_number = i)
original_data <- original_data %>% select(-pred_estoque)
remove(tuned_RF_kfold_cv)
gc()
}
# Required packages -------------------------------------------------------
#install.packages("dplyr")
#install.packages("readxl")
#install.packages("writexl")
#install.packages("readr")
#install.packages("tidyr")
#install.packages("tibble")
#install.packages("yardstick")
#install.packages("caret")
#install.packages("ranger")
#install.packages("chillR")
require(dplyr)
require(readxl)
require(writexl)
require(readr)
require(tidyr)
require(tibble)
require(yardstick)
require(caret)
require(ranger)
require(chillR)
# Data --------------------------------------------------------------------
data_version <- "C1_v003"
cv_results_path <- "D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/rf-kFold-results.xlsx"
list.files(path = cv_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Unique model results ----------------------------------------------------
cv_results <- list(
# Resultados da validação cruzada k-Fold comum:
stable_rf__kFold_results = read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "Both stable and unstable", n_clusters = 0),
# Resultados da validação cruzada Spatial
## 10 clusters
# read_excel(
# paste0(cv_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 10),
## 20 clusters
# read_excel(
# paste0(cv_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
# mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 20),
## 30 clusters
read_excel(
paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_04_08_cvs_C1_v001/results_30clusters/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "Both stable and unstable", n_clusters = 30)
)
cv_results <- bind_rows(cv_results)
# Writting results --------------------------------------------------------
write_xlsx(cv_results,
path = "D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/cross_validation-results_C1_v003.xlsx",
col_names = TRUE)
# Biome-wise standard cross-validation statistics -------------------------
input_data_path <- "D:/0_Projetos/1_mbsolos-validation/data/"
original_data <- read_csv(paste0(input_data_path,
"/matriz_soc_obs_C1_v003_antiga.csv"))
data_version <- "C1_v003"
original_data <- original_data %>% mutate(
biome = ifelse(Amazonia == 1, "Amazônia",
ifelse(Caatinga == 1, "Caatinga",
ifelse(Mata_Atlantica == 1, "Mata Atlântica",
ifelse(Cerrado == 1, "Cerrado",
ifelse(Pampa == 1, "Pampa",
ifelse(Pantanal == 1, "Pantanal", "NA"
)))))))
remove(input_data_path)
# Auxiliary functions -----------------------------------------------------
remove_tail <- function(x, sep = ".R", del = 1){
sapply(strsplit(as.character(x), split = sep, fixed = TRUE),
function(i) paste(head(i, -del), collapse = sep))
}
keep_tail <- function(x, sep = "_", del = 4){
sapply(strsplit(as.character(x), split = sep, fixed = TRUE),
function(i) paste(tail(i, -del), collapse = sep))
}
regression_eval <- function(pred, obs){
# mean error
ME <- round(mean(pred - obs, na.rm = TRUE), digits = 4)
# mean square error
MSE <-   round(mean((pred - obs)^2, na.rm = TRUE), digits = 4)
# mean absolute error
MAE <-   round(mean(abs(pred - obs), na.rm = TRUE), digits = 4)
# root mean square error
RMSE <-   round(sqrt(mean((pred - obs)^2, na.rm = TRUE)), digits = 4)
# Pearson's correlation squared
r2 <-  round((cor(pred, obs, method = 'spearman', use = 'pairwise.complete.obs')^2), digits = 4)
# Nash–Sutcliffe model efficiency coefficient
NSE <- round((1 - sum((obs - pred)^2) / sum((obs - mean(obs))^2)), digits = 4)  # Nash–Sutcliffe model efficiency coefficient
# Lin's concordance correlation coefficient
CCC <- round(yardstick::ccc_vec(truth = obs, estimate = pred), digits = 4)
RPIQ <- RPD(pred, obs, na.rm = TRUE)
out <- c(ME, MAE, MSE, RMSE, NSE, r2, CCC, RPIQ)
names(out) <- c("ME", "MAE", "MSE", "RMSE", "NSE", "Rsquared", "CCC", "RPIQ")
if (any(is.nan(out)))
out[is.nan(out)] <- NA
out
}
# Computing statistical metrics for samples from each biome separa --------
# Computing same goodness-of-fit metrics from models tuning
models_path <- "D:/0_Projetos/1_mbsolos-validation/models/stuned-models_C1_v003_antigo/"
model_names <- list.files(path = models_path, pattern = "RF_cv_model")
model_number <- keep_tail(remove_tail(model_names)) %>% as.numeric()
check_statistical_results <- function(
dataset = biomes[["Amazônia"]],
biome = "Amazônia",
map_version = data_version, model_for = "Both stable and unstable",
cross_validation = "Standard k-Fold CV", n_clusters = 0, model_number = 1) {
regression_eval(pred = dataset %>% pull(pred_estoque),
obs = dataset %>% pull(estoque)) %>%
as.data.frame() %>% t() %>% as_tibble() %>%
mutate(model = model_number,
map_version = map_version,
n_clusters = n_clusters,
cross_validation = cross_validation,
model_for = model_for,
biome = biome)
}
amazonia_cv_results <- list()
caatinga_cv_results <- list()
cerrado_cv_results <- list()
mata_atlantica_cv_results <- list()
pampa_cv_results <- list()
pantanal_cv_results <- list()
for (i in 1:100) {
load(paste0(models_path,
model_names[grep(paste0("_", model_number[i], ".RData"), model_names)]))
original_data$pred_estoque <- tuned_RF_kfold_cv[["finalModel"]][["predictions"]]
amazonia_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Amazônia"), biome = "Amazônia",
model_number = i)
caatinga_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Caatinga"), biome = "Caatinga",
model_number = i)
cerrado_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Cerrado"), biome = "Cerrado",
model_number = i)
mata_atlantica_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Mata Atlântica"), biome = "Mata Atlântica",
model_number = i)
pampa_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Pampa"), biome = "Pampa",
model_number = i)
pantanal_cv_results[[i]] <- check_statistical_results(
dataset = original_data %>% filter(biome == "Pantanal"), biome = "Pantanal",
model_number = i)
original_data <- original_data %>% select(-pred_estoque)
remove(tuned_RF_kfold_cv)
gc()
}
biome_cv_results <- bind_rows(amazonia_cv_results, caatinga_cv_results,
cerrado_cv_results, mata_atlantica_cv_results,
pampa_cv_results, pantanal_cv_results)
remove(amazonia_cv_results, caatinga_cv_results,
cerrado_cv_results, mata_atlantica_cv_results,
pampa_cv_results, pantanal_cv_results)
# Writting in disk
write_xlsx(biome_cv_results,
path = paste0("D:/0_Projetos/1_mbsolos-validation/results/2024_05_11_cv_v003/",
"each_biome-cross_validation-results_C1_v003.xlsx"),
col_names = TRUE)
### Script para Validação Cruzada Standard e Spatial por Bioma ###
#Data: 2023-12-12
#Autores: Erli dos Santos, Marcos Cardoso Taciara Horst
#Contato: erlipinto@gmail.com, cardoso.mvs@gmail.com
## Objetivo:
# Este script importa os resultados e calcula métricas para avaliar o desempenho dos modelos em cada bioma e, em seguida,
# os resultados são escritos separados por bioma, permitindo uma avaliação abrangente do desempenho dos modelos em diferentes ambientes.
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Pacotes necessários -------------------------------------------------------
require(dplyr)       # Para manipulação de dados
require(readxl)      # Para leitura de arquivos Excel
require(writexl)    # Para escrita de arquivos Excel
require(readr)       # Para leitura de dados
require(tidyr)       # Para manipulação de dados (e.g., spread, gather)
require(tibble)      # Para criação de tibbles (data frames)
require(yardstick)   # Para avaliação de modelos de aprendizado de máquina
require(caret)       # Para treinamento e avaliação de modelos
require(ranger)      # Para treinamento de modelos de florestas aleatórias
library(magrittr)    # Para operações pipe (%>%)
# Data --------------------------------------------------------------------
# Definindo a versão dos dados em uso
data_version <- "v0-1-5"
# Criando o caminho para os resultados de validação cruzada
cv_results_path <- paste0("./results/", data_version, "/")
# Listando arquivos .xlsx no caminho especificado
list.files(path = cv_results_path, pattern = ".xlsx")
# Cross-validation results ------------------------------------------------
# Carregando e organizando resultados da validação cruzada de diferentes modelos
cv_results <- list(
# Resultados da validação cruzada k-Fold comum
rf__kFold_results = read_excel(
paste0(cv_results_path, data_version ,"_rf-kFold-results.xlsx")) %>%
mutate(cross_validation = "Standard k-Fold CV", model_for = "random forest", n_clusters = 0),
#  # Resultados da validação cruzada Spatial com diferentes números de clusters
#   ## 10 clusters
# read_excel(
#   paste0(cv_results_path, "/rf-10_clusters-spatial-kFold-results.xlsx")) %>%
#   mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 10),
# ## 20 clusters
# read_excel(
#   paste0(cv_results_path, "/rf-20_clusters-spatial-kFold-results.xlsx")) %>%
#   mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 20),
# ## 30 clusters
read_excel(
paste0(cv_results_path, "/v0-0-1/rf-30_clusters-spatial-kFold-results.xlsx")) %>%
mutate(cross_validation = "Spatial k-Fold CV", model_for = "random forest", n_clusters = 30)
)
